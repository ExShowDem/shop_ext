<?php
/**
 * @package     Aesir.E-Commerce
 * @subpackage  Cest
 * @copyright   Copyright (C) 2012 - 2019 Aesir. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 */
use Step\Frontend\AllPriceSteps as AllPriceSteps;
use Step\Frontend\CategorySteps as CategorySteps;
use Step\Frontend\ProductSteps as ProductSteps;
use Step\Acceptance\redshopb2b as redshopb2b;
class allPricesCest
{
	/**
	 * @var \Faker\Generator
	 * @since 2.4.0
	 */
	protected $faker;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $category;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $sku;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $product;

	/**
	 * @var int
	 * @since 2.4.0
	 */
	protected $priceEdit;

	/**
	 * @var int
	 * @since 2.4.0
	 */
	protected $price;

	/**
	 * @var int
	 * @since 2.4.0
	 */
	protected $retailPrice;

	/**
	 * allPricesCest constructor.
	 * @since 2.4.0
	 */
	public function __construct()
	{
		$this->faker = Faker\Factory::create();
		
		$this->category = $this->faker->bothify('allPricesCest Category ?##?');
		
		$this->sku = $this->faker->bothify('SKU ??##??##');
		
		$this->product = $this->faker->bothify('allPricesCest Product ?##?');
		
		$this->priceEdit = $this->faker->numberBetween(1,100);
		
		$this->price =  $this->faker->numberBetween(1, 100);
		
		$this->retailPrice = $this->faker->numberBetween(1, 20);
	}

	/**
	 * @param AcceptanceTester $I
	 * @throws Exception
	 */
	public function _before(AcceptanceTester $I)
	{
		$I->doFrontEndLogin();
	}
	
	/**
	 * @param AcceptanceTester $I
	 * @param $scenario
	 * @throws Exception
	 */
	public function create(AcceptanceTester $I, $scenario)
	{
		$I->comment('Create category');
		$I = new CategorySteps($scenario);
		$I->create($this->category,'save');

		$I->am('Administrator');
		$I->wantToTest('Product creation in Frontend');
		$I = new ProductSteps($scenario) ;
		$I->wait(1);
		$I->create($this->product,$this->sku, $this->category, $this->price, $this->retailPrice, null, 'save&close');
		$I->doFrontendLogout();
	}
	
	/**
	 * @param AcceptanceTester $I
	 * @param $scenario
	 * @depends create
	 * @throws Exception
	 */
	public function edit(AcceptanceTester $I, $scenario)
	{
		$I->am('Administrator');
		$I->wantToTest('Price edit in Frontend');
		$I = new AllPriceSteps($scenario);
		$I->edit($this->product, $this->sku, $this->priceEdit);
		$I->doFrontendLogout();
	}
	
	/**
	 * @param AcceptanceTester $I
	 * @param $scenario
	 * @throws Exception
	 * @depends edit
	 */
	public function delete(AcceptanceTester $I, $scenario)
	{
		$I->am('Administrator');
		$I->wantToTest('Delete a Product in Frontend');
		$I = new AllPriceSteps($scenario);
		$I->delete($this->product);
		$I->doFrontendLogout();
	}
	
	/**
	 * @param redshopb2b $I
	 * @throws Exception
	 * @depends delete
	 */
	public function cleanUp(redshopb2b $I)
	{
		$I->am('Administrator');
		$I->comment('I remove the data generated by the test that is not anymore needed');
		$I->deleteRedshopbProduct($this->product);
		$I->deleteRedshopbCategory($this->category);
	}
}