<?php
/**
 * @package     Aesir.E-Commerce
 * @subpackage  Cest
 * @copyright   Copyright (C) 2012 - 2019 Aesir. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 */
use Step\Frontend\CollectionSteps as CollectionSteps;
use Step\Frontend\ProductSteps as ProductSteps;
use Step\Acceptance\redshopb2b as redshopb2b;
/**
 * Class CollectionCest
 * @since 2.0.3
 */
class CollectionCest
{
	/**
	 * @var \Faker\Generator
	 * @since 2.4.0
	 */
	protected $faker;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $name;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $nameEdit;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $department;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $company;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $mainCompany;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $currency;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $status;

	/**
	 * @var array
	 * @since 2.4.0
	 */
	protected $products;

	/**
	 * @var string
	 * @since 2.4.0
	 */
	protected $category;
	
	/**
	 * CollectionCest constructor.
	 * @since 2.4.0
	 */
	public function __construct()
	{
		$this->faker = Faker\Factory::create();

		$this->name = 'collectionCest Collection' . $this->faker->numberBetween(1, 9999);

		$this->nameEdit = $this->faker->bothify('nameCollectionEdit ?###?');

		$this->department = $this->faker->bothify('collectionCest Department ?###?');

		$this->company ='Main Warehouse';

		$this->mainCompany = '(main) Main Company';

		$this->currency = 'Euro';

		$this->status ='Unpublished';

		// value for category and product

		$this->products = array();

		$this->products['name'] = $this->faker->bothify('collection Product ?###?');

		$this->products['sku'] = $this->faker->bothify('SKU ?###?');

		$this->products['price'] = $this->faker->numberBetween(1,10);

		$this->category =  $this->faker->bothify('collection Category ?###?');
	}

	/**
	 * @param   AcceptanceTester $I
	 * @param   $scenario
	 * @throws Exception
	 */
	public function createUpdateDelete(AcceptanceTester $I, $scenario)
	{
		$I->am('Administrator');
		$I->wantToTest('Collection creation in Frontend');
		$I->doFrontEndLogin();
		$I = new redshopb2b($scenario);

		$I->comment('create a department to be used by the Collection');
		$I->createRedshopbDepartment($this->department, '(main) Main Company');

		$I->amGoingTo('Create a category to be used by the Checkout Process');

		$I->createRedshopbCategory($this->category, $this->company);

		$I->amGoingTo('Create a product to be used by the Checkout Process');

		$I = new ProductSteps($scenario);
		$I->create($this->products['name'], $this->products['sku'], $this->category,
			$this->products['price'], $this->products['price'], $this->company,'save&close');
		$I->doFrontendLogout();
	}

	/**
	 * @param CollectionSteps $client
	 * @throws Exception
	 */
	public function createCollection(CollectionSteps $client)
	{
		$client->doFrontEndLogin();
		$client->comment('Create a collection');
		$client->create($this->department,$this->name,$this->mainCompany,$this->currency,$this->status, $this->products);
		$client->doFrontendLogout();
	}

	/**
	 * @param CollectionSteps $client
	 * @throws Exception
	 */
	public function editCollection(CollectionSteps $client)
	{
		$client->am('Administrator');
		$client->wantToTest('Edit collection in Frontend');
		$client->doFrontEndLogin();
		$client->comment('Edit name of Collection');
		$client->wait(0.5);
		$client->edit($this->name,$this->nameEdit);
	}
	/**
	 * @param   redshopb2b $client Manager
	 * @depends createUpdateDelete
	 * @return void
	 * @throws  \Exception
	 * @since   2.0.3
	 */
	public function cleanUp(redshopb2b $client, $scenario)
	{
		$client->am('Administrator');
		$client->wantTo('Clears up');
		$client->doFrontEndLogin();
		$client = new CollectionSteps($scenario);
		$client->delete($this->nameEdit);
		$client->comment('I remove the data generated by the test that is not anymore needed');
		$client->deleteRedshopbDepartment($this->department);
		$client->comment('Delete product');
		$client->deleteRedshopbProduct($this->products['name']);
		$client->comment('Delete category');
		$client->deleteRedshopbCategory($this->category);
	}
}